---
# generated by https://github.com/hashicorp/terraform-plugin-docs
page_title: "{{ .Name }} {{ .Type }} - {{ .ProviderName }}"
subcategory: ""
description: |-
  {{ .Description | plainmarkdown | trimspace | prefixlines "  " }}
---

# {{ .Name }} ({{ .Type | title }})

Provides an authentication domain mapping resource.

## Example Usage

```terraform
# Basic authentication domain mapping
resource "wallix-bastion_authdomain_mapping" "corporate_mapping" {
  domain_name     = "corporate.local"
  auth_domain     = wallix-bastion_authdomain_ldap.corporate.domain_name
  user_group      = "memberOf"
  group_filter    = "(objectClass=group)"
  description     = "Corporate LDAP domain mapping"
}

# Active Directory domain mapping with specific groups
resource "wallix-bastion_authdomain_mapping" "ad_mapping" {
  domain_name     = "ad.company.com"
  auth_domain     = wallix-bastion_authdomain_ad.company_ad.domain_name
  user_group      = "memberOf"
  group_filter    = "(objectClass=group)"
  description     = "Active Directory domain mapping"
  
  # Specific group mappings
  group_mappings = {
    "CN=Domain Admins,CN=Users,DC=company,DC=com"     = "administrators"
    "CN=IT Support,OU=Groups,DC=company,DC=com"       = "support_team"
    "CN=Database Admins,OU=Groups,DC=company,DC=com"  = "database_admins"
    "CN=Network Admins,OU=Groups,DC=company,DC=com"   = "network_admins"
  }
}

# Azure AD domain mapping
resource "wallix-bastion_authdomain_mapping" "azure_mapping" {
  domain_name     = "azure.company.com"
  auth_domain     = wallix-bastion_authdomain_azuread.azure_ad.domain_name
  user_group      = "groups"
  group_filter    = "Security Group"
  description     = "Azure AD domain mapping"
  
  # Azure AD group mappings
  group_mappings = {
    "Bastion Administrators" = "administrators"
    "IT Operations"          = "operators"
    "Database Team"          = "database_admins"
    "Security Team"          = "security_admins"
    "Help Desk"             = "support_team"
  }
}

# SAML domain mapping
resource "wallix-bastion_authdomain_mapping" "saml_mapping" {
  domain_name     = "saml.company.com"
  auth_domain     = wallix-bastion_authdomain_saml.company_saml.domain_name
  user_group      = "groups"
  group_filter    = "Role"
  description     = "SAML domain mapping"
  
  # SAML role mappings
  group_mappings = {
    "bastion-admin"     = "administrators"
    "bastion-operator"  = "operators"
    "bastion-readonly"  = "readonly_users"
    "bastion-auditor"   = "auditors"
  }
}

# Multi-level group mapping
resource "wallix-bastion_authdomain_mapping" "hierarchical_mapping" {
  domain_name     = "hierarchical.company.com"
  auth_domain     = wallix-bastion_authdomain_ldap.hierarchical.domain_name
  user_group      = "memberOf"
  group_filter    = "(objectClass=group)"
  description     = "Hierarchical group mapping"
  
  # Hierarchical group structure
  group_mappings = {
    # Executive level
    "CN=Executives,OU=Management,DC=company,DC=com"        = "executives"
    
    # Management level
    "CN=IT Managers,OU=Management,DC=company,DC=com"       = "it_managers"
    "CN=Security Managers,OU=Management,DC=company,DC=com" = "security_managers"
    
    # Team level
    "CN=System Admins,OU=IT,DC=company,DC=com"            = "system_admins"
    "CN=Network Admins,OU=IT,DC=company,DC=com"           = "network_admins"
    "CN=Database Admins,OU=IT,DC=company,DC=com"          = "database_admins"
    "CN=Security Analysts,OU=Security,DC=company,DC=com"  = "security_analysts"
    
    # Support level
    "CN=L1 Support,OU=Support,DC=company,DC=com"          = "l1_support"
    "CN=L2 Support,OU=Support,DC=company,DC=com"          = "l2_support"
    "CN=L3 Support,OU=Support,DC=company,DC=com"          = "l3_support"
  }
}

# Environment-specific mapping
resource "wallix-bastion_authdomain_mapping" "environment_mapping" {
  domain_name     = "env.company.com"
  auth_domain     = wallix-bastion_authdomain_ldap.corporate.domain_name
  user_group      = "memberOf"
  group_filter    = "(objectClass=group)"
  description     = "Environment-specific domain mapping"
  
  # Environment-based group mappings
  group_mappings = {
    # Production environment
    "CN=Prod Admins,OU=Production,DC=company,DC=com"      = "production_admins"
    "CN=Prod Operators,OU=Production,DC=company,DC=com"   = "production_operators"
    "CN=Prod ReadOnly,OU=Production,DC=company,DC=com"    = "production_readonly"
    
    # Staging environment
    "CN=Stage Admins,OU=Staging,DC=company,DC=com"        = "staging_admins"
    "CN=Stage Testers,OU=Staging,DC=company,DC=com"       = "staging_testers"
    
    # Development environment
    "CN=Dev Team,OU=Development,DC=company,DC=com"        = "developers"
    "CN=QA Team,OU=Development,DC=company,DC=com"         = "qa_testers"
  }
}

# Role-based mapping with fine-grained permissions
resource "wallix-bastion_authdomain_mapping" "rbac_mapping" {
  domain_name     = "rbac.company.com"
  auth_domain     = wallix-bastion_authdomain_ad.corporate.domain_name
  user_group      = "memberOf"
  group_filter    = "(objectClass=group)"
  description     = "Role-based access control mapping"
  
  # Fine-grained role mappings
  group_mappings = {
    # Administrative roles
    "CN=Super Admins,OU=Roles,DC=company,DC=com"         = "super_administrators"
    "CN=System Admins,OU=Roles,DC=company,DC=com"        = "system_administrators"
    "CN=Security Admins,OU=Roles,DC=company,DC=com"      = "security_administrators"
    "CN=Network Admins,OU=Roles,DC=company,DC=com"       = "network_administrators"
    "CN=Database Admins,OU=Roles,DC=company,DC=com"      = "database_administrators"
    
    # Operational roles
    "CN=System Operators,OU=Roles,DC=company,DC=com"     = "system_operators"
    "CN=Network Operators,OU=Roles,DC=company,DC=com"    = "network_operators"
    "CN=Database Operators,OU=Roles,DC=company,DC=com"   = "database_operators"
    "CN=Backup Operators,OU=Roles,DC=company,DC=com"     = "backup_operators"
    
    # Monitoring and support roles
    "CN=Monitoring Team,OU=Roles,DC=company,DC=com"      = "monitoring_team"
    "CN=Incident Response,OU=Roles,DC=company,DC=com"    = "incident_responders"
    "CN=Change Managers,OU=Roles,DC=company,DC=com"      = "change_managers"
    
    # Auditing and compliance roles
    "CN=Auditors,OU=Roles,DC=company,DC=com"             = "auditors"
    "CN=Compliance Officers,OU=Roles,DC=company,DC=com"  = "compliance_officers"
    "CN=Risk Managers,OU=Roles,DC=company,DC=com"        = "risk_managers"
  }
}

# Contractor and external user mapping
resource "wallix-bastion_authdomain_mapping" "external_mapping" {
  domain_name     = "external.company.com"
  auth_domain     = wallix-bastion_authdomain_ldap.partners.domain_name
  user_group      = "memberOf"
  group_filter    = "(objectClass=group)"
  description     = "External user and contractor mapping"
  
  # External user mappings
  group_mappings = {
    # Contractor groups
    "CN=IT Contractors,OU=External,DC=company,DC=com"     = "contractors_it"
    "CN=Security Contractors,OU=External,DC=company,DC=com" = "contractors_security"
    "CN=Audit Contractors,OU=External,DC=company,DC=com"  = "contractors_audit"
    
    # Partner groups
    "CN=Partner Admins,OU=Partners,DC=company,DC=com"     = "partner_admins"
    "CN=Partner Support,OU=Partners,DC=company,DC=com"    = "partner_support"
    "CN=Partner ReadOnly,OU=Partners,DC=company,DC=com"   = "partner_readonly"
    
    # Vendor groups
    "CN=Vendor Support,OU=Vendors,DC=company,DC=com"      = "vendor_support"
    "CN=Vendor Maintenance,OU=Vendors,DC=company,DC=com"  = "vendor_maintenance"
  }
}

# Time-based access mapping
resource "wallix-bastion_authdomain_mapping" "time_based_mapping" {
  domain_name     = "timebased.company.com"
  auth_domain     = wallix-bastion_authdomain_ad.corporate.domain_name
  user_group      = "memberOf"
  group_filter    = "(objectClass=group)"
  description     = "Time-based access mapping"
  
  # Time-based group mappings
  group_mappings = {
    # Business hours access
    "CN=Business Hours Admins,OU=Time,DC=company,DC=com"  = "business_hours_admins"
    "CN=Business Hours Users,OU=Time,DC=company,DC=com"   = "business_hours_users"
    
    # Extended hours access
    "CN=Extended Hours Admins,OU=Time,DC=company,DC=com"  = "extended_hours_admins"
    "CN=Extended Hours Ops,OU=Time,DC=company,DC=com"     = "extended_hours_operators"
    
    # 24/7 access
    "CN=24x7 Admins,OU=Time,DC=company,DC=com"           = "always_available_admins"
    "CN=24x7 Operators,OU=Time,DC=company,DC=com"        = "always_available_operators"
    "CN=Emergency Response,OU=Time,DC=company,DC=com"     = "emergency_responders"
  }
}

# Application-specific mapping
resource "wallix-bastion_authdomain_mapping" "application_mapping" {
  domain_name     = "apps.company.com"
  auth_domain     = wallix-bastion_authdomain_ldap.corporate.domain_name
  user_group      = "memberOf"
  group_filter    = "(objectClass=group)"
  description     = "Application-specific domain mapping"
  
  # Application-based group mappings
  group_mappings = {
    # Database applications
    "CN=Oracle Admins,OU=Apps,DC=company,DC=com"         = "oracle_administrators"
    "CN=SQL Server Admins,OU=Apps,DC=company,DC=com"     = "sqlserver_administrators"
    "CN=MySQL Admins,OU=Apps,DC=company,DC=com"          = "mysql_administrators"
    "CN=PostgreSQL Admins,OU=Apps,DC=company,DC=com"     = "postgresql_administrators"
    
    # Web applications
    "CN=Web Admins,OU=Apps,DC=company,DC=com"            = "web_administrators"
    "CN=Apache Admins,OU=Apps,DC=company,DC=com"         = "apache_administrators"
    "CN=IIS Admins,OU=Apps,DC=company,DC=com"            = "iis_administrators"
    
    # Middleware applications
    "CN=WebLogic Admins,OU=Apps,DC=company,DC=com"       = "weblogic_administrators"
    "CN=WebSphere Admins,OU=Apps,DC=company,DC=com"      = "websphere_administrators"
    "CN=Tomcat Admins,OU=Apps,DC=company,DC=com"         = "tomcat_administrators"
  }
}
```

{{ .SchemaMarkdown | trimspace }}

## Usage Notes

### Domain Mapping Purpose

Authentication domain mapping bridges external authentication systems (LDAP, AD, Azure AD, SAML) with internal bastion authorization by mapping external groups to internal roles and permissions.

### Basic Configuration

**Required Fields:**

- **domain_name**: Internal domain identifier for the mapping
- **auth_domain**: Reference to the external authentication domain
- **user_group**: Attribute containing group membership information
- **group_filter**: Filter to identify valid groups in the external system

### Group Mapping Strategies

**Direct Mapping:**

```terraform
group_mappings = {
  "External Group Name" = "internal_role"
}
```

**Hierarchical Mapping:**

```terraform
group_mappings = {
  "CN=Executives,OU=Management,DC=company,DC=com"   = "executives"
  "CN=Managers,OU=Management,DC=company,DC=com"     = "managers"
  "CN=Employees,OU=Staff,DC=company,DC=com"         = "employees"
}
```

**Role-Based Mapping:**

```terraform
group_mappings = {
  "admin-role"     = "administrators"
  "operator-role"  = "operators"
  "readonly-role"  = "readonly_users"
}
```

### Authentication System Integration

**LDAP Integration:**

```terraform
resource "wallix-bastion_authdomain_mapping" "ldap_mapping" {
  auth_domain  = wallix-bastion_authdomain_ldap.corporate.domain_name
  user_group   = "memberOf"
  group_filter = "(objectClass=group)"
}
```

**Active Directory Integration:**

```terraform
resource "wallix-bastion_authdomain_mapping" "ad_mapping" {
  auth_domain  = wallix-bastion_authdomain_ad.corporate.domain_name
  user_group   = "memberOf"
  group_filter = "(objectClass=group)"
}
```

**Azure AD Integration:**

```terraform
resource "wallix-bastion_authdomain_mapping" "azure_mapping" {
  auth_domain  = wallix-bastion_authdomain_azuread.corporate.domain_name
  user_group   = "groups"
  group_filter = "Security Group"
}
```

**SAML Integration:**

```terraform
resource "wallix-bastion_authdomain_mapping" "saml_mapping" {
  auth_domain  = wallix-bastion_authdomain_saml.corporate.domain_name
  user_group   = "groups"
  group_filter = "Role"
}
```

### Group Filter Configuration

**LDAP/AD Group Filters:**

```terraform
group_filter = "(objectClass=group)"                    # All groups
group_filter = "(objectClass=groupOfNames)"            # Group of names
group_filter = "(&(objectClass=group)(cn=Bastion*))"   # Groups starting with "Bastion"
group_filter = "(groupType:1.2.840.113556.1.4.803:=2147483648)"  # Security groups only
```

**Custom Filters:**

```terraform
group_filter = "(|(cn=Admin*)(cn=Operator*))"          # Admin or Operator groups
group_filter = "(&(objectClass=group)(!(cn=Temp*)))"   # Exclude temporary groups
```

### Mapping Patterns

**Environment-Based Mapping:**

```terraform
group_mappings = {
  "prod-admin"    = "production_administrators"
  "staging-admin" = "staging_administrators"
  "dev-admin"     = "development_administrators"
}
```

**Function-Based Mapping:**

```terraform
group_mappings = {
  "network-team"   = "network_administrators"
  "database-team"  = "database_administrators"
  "security-team"  = "security_administrators"
  "support-team"   = "support_technicians"
}
```

**Permission-Level Mapping:**

```terraform
group_mappings = {
  "full-access"     = "full_administrators"
  "limited-access"  = "limited_operators"
  "readonly-access" = "readonly_users"
  "audit-access"    = "auditors"
}
```

### Best Practices

**Naming Conventions:**

1. Use consistent internal role names
2. Document external group DN formats
3. Use descriptive mapping descriptions
4. Implement hierarchical role structures

**Security Considerations:**

1. Map only necessary groups
2. Use least-privilege principle
3. Regular access reviews
4. Audit group membership changes
5. Monitor unmapped group access attempts

**Operational Practices:**

1. Document all group mappings
2. Test mappings after changes
3. Maintain mapping consistency across environments
4. Regular validation of external groups

### Advanced Configuration

**Conditional Mapping:**

```terraform
group_mappings = {
  # Time-based roles
  "business-hours-admin" = "business_hours_administrator"
  "after-hours-admin"    = "after_hours_administrator"
  
  # Location-based roles
  "onsite-admin"         = "onsite_administrator"
  "remote-admin"         = "remote_administrator"
}
```

**Multi-Factor Mapping:**

```terraform
group_mappings = {
  # Require multiple group memberships
  "high-security-admin"  = "high_security_administrator"  # Requires MFA
  "privileged-access"    = "privileged_operator"         # Requires approval
}
```

### Integration with Authorization

**User Profile Assignment:**

```terraform
resource "wallix-bastion_user" "mapped_user" {
  user_name    = "john.doe"
  auth_domain  = wallix-bastion_authdomain_mapping.corporate_mapping.domain_name
  profile      = "administrator"  # Based on group mapping
}
```

**Profile-Based Access:**

```terraform
resource "wallix-bastion_profile" "admin_profile" {
  profile_name = "administrator"
  # ... profile configuration based on mapped roles
}
```

### Monitoring and Troubleshooting

**Common Issues:**

1. **Group Not Found**: External group name mismatch
2. **Mapping Not Applied**: User not member of mapped group
3. **Multiple Mappings**: User in multiple groups with conflicting roles
4. **Case Sensitivity**: Group name case mismatch

**Debugging Steps:**

1. Verify external group names and DNs
2. Check user group membership in external system
3. Validate group filter syntax
4. Test authentication with mapped users
5. Review authentication logs

**Monitoring Points:**

- Authentication success/failure rates per mapping
- Unmapped group access attempts
- Group membership changes
- Role assignment changes

### Compliance and Auditing

**Access Reviews:**

```terraform
# Document group mappings for audit
output "group_mapping_documentation" {
  value = {
    domain_name = wallix-bastion_authdomain_mapping.corporate_mapping.domain_name
    auth_domain = wallix-bastion_authdomain_mapping.corporate_mapping.auth_domain
    mappings    = wallix-bastion_authdomain_mapping.corporate_mapping.group_mappings
  }
}
```

**Compliance Reporting:**

- Regular mapping reviews
- Group membership audits
- Role assignment validation
- Access pattern analysis

## Import

Authentication domain mapping can be imported using the domain name, e.g.

```shell
terraform import wallix-bastion_authdomain_mapping.corporate_mapping "corporate.local"
```