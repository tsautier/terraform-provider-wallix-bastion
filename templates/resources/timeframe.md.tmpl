---
# generated by https://github.com/hashicorp/terraform-plugin-docs
page_title: "{{ .Name }} {{ .Type }} - {{ .ProviderName }}"
subcategory: ""
description: |-
  {{ .Description | plainmarkdown | trimspace | prefixlines "  " }}
---

# {{ .Name }} ({{ .Type | title }})

Provides a timeframe resource.

## Example Usage

```terraform
# Business hours timeframe
resource "wallix-bastion_timeframe" "business_hours" {
  timeframe_name = "business_hours"
  description    = "Standard business hours"
  is_overtimable = true
  
  periods {
    start_date = "2024-01-01"
    end_date   = "2024-12-31"
    start_time = "08:00"
    end_time   = "18:00"
    week_days  = ["monday", "tuesday", "wednesday", "thursday", "friday"]
  }
}

# Maintenance window timeframe
resource "wallix-bastion_timeframe" "maintenance" {
  timeframe_name = "maintenance_window"
  description    = "Weekend maintenance window"
  is_overtimable = false
  
  periods {
    start_date = "2024-01-01"
    end_date   = "2024-12-31"
    start_time = "02:00"
    end_time   = "06:00"
    week_days  = ["saturday", "sunday"]
  }
}

# Emergency access timeframe
resource "wallix-bastion_timeframe" "emergency" {
  timeframe_name = "emergency_access"
  description    = "24/7 emergency access"
  is_overtimable = true
  
  periods {
    start_date = "2024-01-01"
    end_date   = "2025-12-31"
    start_time = "00:00"
    end_time   = "23:59"
    week_days  = ["monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday"]
  }
}

# Multiple period timeframe
resource "wallix-bastion_timeframe" "split_shifts" {
  timeframe_name = "split_shifts"
  description    = "Split shift work hours"
  is_overtimable = true
  
  # Morning shift
  periods {
    start_date = "2024-01-01"
    end_date   = "2024-12-31"
    start_time = "06:00"
    end_time   = "14:00"
    week_days  = ["monday", "tuesday", "wednesday", "thursday", "friday"]
  }
  
  # Evening shift
  periods {
    start_date = "2024-01-01"
    end_date   = "2024-12-31"
    start_time = "14:00"
    end_time   = "22:00"
    week_days  = ["monday", "tuesday", "wednesday", "thursday", "friday"]
  }
}

# Seasonal timeframe
resource "wallix-bastion_timeframe" "summer_hours" {
  timeframe_name = "summer_hours"
  description    = "Summer working hours"
  is_overtimable = true
  
  periods {
    start_date = "2024-06-01"
    end_date   = "2024-08-31"
    start_time = "07:00"
    end_time   = "15:00"
    week_days  = ["monday", "tuesday", "wednesday", "thursday", "friday"]
  }
}
```

{{ .SchemaMarkdown | trimspace }}

## Usage Notes

### Period Configuration

Each period defines when access is allowed:
- **start_date/end_date**: Date range in "yyyy-mm-dd" format
- **start_time/end_time**: Time range in "hh:mm" format (24-hour)
- **week_days**: Days when this period applies

### Week Days

Valid week day values:
- `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`, `sunday`

### Overtime Behavior

- **is_overtimable = true**: Sessions continue beyond timeframe end
- **is_overtimable = false**: Sessions terminate at timeframe end

### Multiple Periods

You can define multiple periods for complex schedules:
- Different hours for different days
- Seasonal variations
- Split shifts
- Holiday schedules

### Time Zone Considerations

- All times are interpreted in the Bastion server's timezone
- Ensure consistent timezone configuration across your infrastructure
- Consider daylight saving time changes

### Usage in User Groups

Timeframes are assigned to user groups:

```terraform
resource "wallix-bastion_usergroup" "day_shift" {
  group_name = "day_shift_operators"
  timeframes = [wallix-bastion_timeframe.business_hours.timeframe_name]
}

resource "wallix-bastion_usergroup" "maintenance_team" {
  group_name = "maintenance_team"
  timeframes = [
    wallix-bastion_timeframe.business_hours.timeframe_name,
    wallix-bastion_timeframe.maintenance.timeframe_name
  ]
}
```

### Best Practices

1. **Descriptive Names**: Use clear, descriptive timeframe names
2. **Documentation**: Include detailed descriptions explaining the purpose
3. **Overlap**: Ensure adequate coverage for continuous operations
4. **Review**: Regularly review and update timeframes for accuracy
5. **Testing**: Test timeframe behavior before production deployment

### Common Patterns

**24/7 Access:**
```terraform
periods {
  start_date = "2024-01-01"
  end_date   = "2030-12-31"
  start_time = "00:00"
  end_time   = "23:59"
  week_days  = ["monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday"]
}
```

**Weekdays Only:**
```terraform
periods {
  start_date = "2024-01-01"
  end_date   = "2024-12-31"
  start_time = "08:00"
  end_time   = "17:00"
  week_days  = ["monday", "tuesday", "wednesday", "thursday", "friday"]
}
```

**Weekends Only:**
```terraform
periods {
  start_date = "2024-01-01"
  end_date   = "2024-12-31"
  start_time = "09:00"
  end_time   = "17:00"
  week_days  = ["saturday", "sunday"]
}
```

## Import

Timeframe can be imported using an id made up of `<timeframe_name>`, e.g.

```shell
terraform import wallix-bastion_timeframe.business_hours business_hours
```