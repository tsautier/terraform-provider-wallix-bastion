---
# generated by https://github.com/hashicorp/terraform-plugin-docs
page_title: "{{ .Name }} {{ .Type }} - {{ .ProviderName }}"
subcategory: ""
description: |-
  {{ .Description | plainmarkdown | trimspace | prefixlines "  " }}
---

# {{ .Name }} ({{ .Type | title }})

Provides information about a local password policy.

## Example Usage

```terraform
# Get information about a specific password policy
data "wallix-bastion_local_password_policy" "default" {
  policy_name = "default_policy"
}

# Use password policy information in user creation
resource "wallix-bastion_user" "new_user" {
  user_name       = "testuser"
  password_policy = data.wallix-bastion_local_password_policy.default.policy_name
  
  # Ensure password meets policy requirements
  lifecycle {
    precondition {
      condition     = data.wallix-bastion_local_password_policy.default.minimum_length <= 12
      error_message = "User password must meet minimum length requirements."
    }
  }
}

# Get multiple password policies for comparison
data "wallix-bastion_local_password_policy" "basic" {
  policy_name = "basic_policy"
}

data "wallix-bastion_local_password_policy" "strong" {
  policy_name = "strong_policy"
}

data "wallix-bastion_local_password_policy" "admin" {
  policy_name = "admin_policy"
}

# Compare password policy requirements
locals {
  password_policies = {
    basic  = data.wallix-bastion_local_password_policy.basic
    strong = data.wallix-bastion_local_password_policy.strong
    admin  = data.wallix-bastion_local_password_policy.admin
  }
  
  # Find the most restrictive policy
  strongest_policy = {
    for name, policy in local.password_policies :
    name => policy
    if policy.minimum_length == max([
      for p in local.password_policies : p.minimum_length
    ]...)
  }
}

# Get system default password policy
data "wallix-bastion_configoption" "default_policy_name" {
  option_name = "default_password_policy"
}

data "wallix-bastion_local_password_policy" "system_default" {
  policy_name = data.wallix-bastion_configoption.default_policy_name.value
}

# Validate policy compliance
locals {
  policy_compliance = {
    meets_minimum_length = data.wallix-bastion_local_password_policy.admin.minimum_length >= 12
    requires_complexity  = data.wallix-bastion_local_password_policy.admin.require_uppercase && 
                          data.wallix-bastion_local_password_policy.admin.require_lowercase &&
                          data.wallix-bastion_local_password_policy.admin.require_numbers
    has_aging           = data.wallix-bastion_local_password_policy.admin.max_age_days > 0
    has_history         = data.wallix-bastion_local_password_policy.admin.password_history > 0
  }
}

# Create users with appropriate policies based on role
resource "wallix-bastion_user" "standard_users" {
  for_each = toset(["user1", "user2", "user3"])
  
  user_name       = each.key
  password_policy = data.wallix-bastion_local_password_policy.basic.policy_name
}

resource "wallix-bastion_user" "privileged_users" {
  for_each = toset(["admin1", "admin2"])
  
  user_name       = each.key
  password_policy = data.wallix-bastion_local_password_policy.admin.policy_name
}

# Policy information for documentation
output "password_policy_summary" {
  description = "Summary of password policy requirements"
  value = {
    default_policy = {
      name            = data.wallix-bastion_local_password_policy.default.policy_name
      min_length      = data.wallix-bastion_local_password_policy.default.minimum_length
      max_length      = data.wallix-bastion_local_password_policy.default.maximum_length
      complexity      = data.wallix-bastion_local_password_policy.default.complexity_level
      requires_upper  = data.wallix-bastion_local_password_policy.default.require_uppercase
      requires_lower  = data.wallix-bastion_local_password_policy.default.require_lowercase
      requires_numbers = data.wallix-bastion_local_password_policy.default.require_numbers
      requires_symbols = data.wallix-bastion_local_password_policy.default.require_symbols
      max_age_days    = data.wallix-bastion_local_password_policy.default.max_age_days
      history_count   = data.wallix-bastion_local_password_policy.default.password_history
    }
  }
}

# Security compliance reporting
locals {
  security_standards = {
    nist_compliant = (
      data.wallix-bastion_local_password_policy.admin.minimum_length >= 8 &&
      data.wallix-bastion_local_password_policy.admin.require_uppercase &&
      data.wallix-bastion_local_password_policy.admin.require_lowercase &&
      data.wallix-bastion_local_password_policy.admin.require_numbers
    )
    
    pci_dss_compliant = (
      data.wallix-bastion_local_password_policy.admin.minimum_length >= 7 &&
      data.wallix-bastion_local_password_policy.admin.require_uppercase &&
      data.wallix-bastion_local_password_policy.admin.require_lowercase &&
      data.wallix-bastion_local_password_policy.admin.require_numbers &&
      data.wallix-bastion_local_password_policy.admin.password_history >= 4
    )
    
    iso27001_compliant = (
      data.wallix-bastion_local_password_policy.admin.minimum_length >= 8 &&
      data.wallix-bastion_local_password_policy.admin.complexity_level == "high" &&
      data.wallix-bastion_local_password_policy.admin.max_age_days > 0 &&
      data.wallix-bastion_local_password_policy.admin.max_age_days <= 90
    )
  }
}

output "compliance_status" {
  description = "Password policy compliance with security standards"
  value       = local.security_standards
}

# Policy recommendations based on analysis
locals {
  policy_recommendations = {
    improve_length = data.wallix-bastion_local_password_policy.default.minimum_length < 12 ? 
                    "Consider increasing minimum password length to 12 characters" : null
    
    add_complexity = (!data.wallix-bastion_local_password_policy.default.require_symbols) ? 
                    "Consider requiring special characters for stronger passwords" : null
    
    implement_aging = (data.wallix-bastion_local_password_policy.default.max_age_days == 0) ? 
                     "Consider implementing password aging for privileged accounts" : null
    
    increase_history = (data.wallix-bastion_local_password_policy.default.password_history < 6) ? 
                      "Consider increasing password history to prevent reuse" : null
  }
  
  # Filter out null recommendations
  active_recommendations = {
    for key, value in local.policy_recommendations : key => value if value != null
  }
}

output "policy_recommendations" {
  description = "Recommendations for improving password policies"
  value       = local.active_recommendations
}

# Create dynamic policy assignments
locals {
  user_roles = {
    "standard_user"    = data.wallix-bastion_local_password_policy.basic.policy_name
    "privileged_user"  = data.wallix-bastion_local_password_policy.strong.policy_name
    "administrator"    = data.wallix-bastion_local_password_policy.admin.policy_name
  }
}

# Policy-driven user creation
resource "wallix-bastion_user" "role_based_users" {
  for_each = {
    "john.doe"    = "standard_user"
    "jane.admin"  = "administrator"
    "service.acc" = "privileged_user"
  }
  
  user_name       = each.key
  password_policy = local.user_roles[each.value]
  
  # Add metadata based on policy
  tags = {
    role           = each.value
    policy_name    = local.user_roles[each.value]
    security_level = each.value == "administrator" ? "high" : "standard"
  }
}
```

{{ .SchemaMarkdown | trimspace }}

## Usage Notes

### Password Policy Attributes

**Length Requirements:**
- `minimum_length`: Minimum number of characters required
- `maximum_length`: Maximum number of characters allowed

**Complexity Requirements:**
- `complexity_level`: Overall complexity (low, medium, high, maximum)
- `require_uppercase`: Requires uppercase letters (A-Z)
- `require_lowercase`: Requires lowercase letters (a-z)
- `require_numbers`: Requires numeric digits (0-9)
- `require_symbols`: Requires special characters

**Advanced Complexity:**
- `min_uppercase`: Minimum number of uppercase letters
- `min_lowercase`: Minimum number of lowercase letters
- `min_numbers`: Minimum number of numeric digits
- `min_symbols`: Minimum number of special characters

**Password Aging:**
- `max_age_days`: Maximum password age (0 = never expires)
- `min_age_days`: Minimum age before password can be changed
- `warning_days`: Days before expiration to warn users
- `password_history`: Number of previous passwords to remember

**Security Features:**
- `dictionary_check`: Check against common passwords
- `personal_info_check`: Check against user personal information
- `forbidden_chars`: List of prohibited characters
- `force_change_first_login`: Require password change on first login

### Policy Compliance Checking

**NIST Guidelines:**
```terraform
locals {
  nist_compliance = {
    min_length_ok = data.wallix-bastion_local_password_policy.policy.minimum_length >= 8
    no_composition_rules = !(
      data.wallix-bastion_local_password_policy.policy.require_uppercase ||
      data.wallix-bastion_local_password_policy.policy.require_lowercase ||
      data.wallix-bastion_local_password_policy.policy.require_numbers ||
      data.wallix-bastion_local_password_policy.policy.require_symbols
    )
    dictionary_check_enabled = data.wallix-bastion_local_password_policy.policy.dictionary_check
  }
}
```

**PCI DSS Compliance:**
```terraform
locals {
  pci_compliance = {
    min_length_7 = data.wallix-bastion_local_password_policy.policy.minimum_length >= 7
    complexity_required = (
      data.wallix-bastion_local_password_policy.policy.require_uppercase &&
      data.wallix-bastion_local_password_policy.policy.require_lowercase &&
      data.wallix-bastion_local_password_policy.policy.require_numbers
    )
    history_4_passwords = data.wallix-bastion_local_password_policy.policy.password_history >= 4
    max_age_90_days = data.wallix-bastion_local_password_policy.policy.max_age_days <= 90
  }
}
```

**ISO 27001 Compliance:**
```terraform
locals {
  iso_compliance = {
    adequate_length = data.wallix-bastion_local_password_policy.policy.minimum_length >= 8
    complexity_enforced = data.wallix-bastion_local_password_policy.policy.complexity_level != "low"
    aging_implemented = data.wallix-bastion_local_password_policy.policy.max_age_days > 0
    history_maintained = data.wallix-bastion_local_password_policy.policy.password_history > 0
  }
}
```

### Policy Analysis

**Policy Comparison:**
```terraform
locals {
  policy_comparison = {
    for name in ["basic", "standard", "strong", "admin"] :
    name => {
      min_length = data.wallix-bastion_local_password_policy[name].minimum_length
      complexity = data.wallix-bastion_local_password_policy[name].complexity_level
      max_age    = data.wallix-bastion_local_password_policy[name].max_age_days
      history    = data.wallix-bastion_local_password_policy[name].password_history
    }
  }
}
```

**Security Score Calculation:**
```terraform
locals {
  security_score = (
    (data.wallix-bastion_local_password_policy.policy.minimum_length >= 12 ? 25 : 0) +
    (data.wallix-bastion_local_password_policy.policy.require_uppercase ? 15 : 0) +
    (data.wallix-bastion_local_password_policy.policy.require_lowercase ? 15 : 0) +
    (data.wallix-bastion_local_password_policy.policy.require_numbers ? 15 : 0) +
    (data.wallix-bastion_local_password_policy.policy.require_symbols ? 15 : 0) +
    (data.wallix-bastion_local_password_policy.policy.dictionary_check ? 10 : 0) +
    (data.wallix-bastion_local_password_policy.policy.password_history >= 6 ? 5 : 0)
  )
}
```

### Role-Based Policy Assignment

**Dynamic Policy Selection:**
```terraform
locals {
  role_policies = {
    intern         = "basic_policy"
    employee       = "standard_policy"
    manager        = "strong_policy"
    administrator  = "admin_policy"
    service_account = "service_policy"
  }
}

data "wallix-bastion_local_password_policy" "role_policies" {
  for_each    = local.role_policies
  policy_name = each.value
}
```

### Policy Validation

**Validation Functions:**
```terraform
locals {
  validation_results = {
    length_adequate = data.wallix-bastion_local_password_policy.policy.minimum_length >= var.required_min_length
    
    complexity_sufficient = (
      data.wallix-bastion_local_password_policy.policy.complexity_level == "high" ||
      data.wallix-bastion_local_password_policy.policy.complexity_level == "maximum"
    )
    
    aging_appropriate = (
      data.wallix-bastion_local_password_policy.policy.max_age_days > 0 &&
      data.wallix-bastion_local_password_policy.policy.max_age_days <= var.max_allowed_age
    )
    
    history_sufficient = data.wallix-bastion_local_password_policy.policy.password_history >= var.min_history_count
  }
  
  all_validations_pass = alltrue(values(local.validation_results))
}
```

### Integration with User Management

**Conditional User Creation:**
```terraform
resource "wallix-bastion_user" "conditional_user" {
  count = local.all_validations_pass ? 1 : 0
  
  user_name       = "secure_user"
  password_policy = data.wallix-bastion_local_password_policy.policy.policy_name
}
```

**Policy-Aware User Templates:**
```terraform
locals {
  user_templates = {
    standard = {
      policy = data.wallix-bastion_local_password_policy.standard.policy_name
      profile = "standard_user_profile"
    }
    privileged = {
      policy = data.wallix-bastion_local_password_policy.admin.policy_name
      profile = "admin_user_profile"
    }
  }
}
```

### Monitoring and Reporting

**Policy Health Report:**
```terraform
output "policy_health_report" {
  description = "Health assessment of password policies"
  value = {
    policy_name = data.wallix-bastion_local_password_policy.policy.policy_name
    security_score = local.security_score
    compliance = {
      nist    = local.nist_compliance
      pci_dss = local.pci_compliance
      iso27001 = local.iso_compliance
    }
    recommendations = local.active_recommendations
  }
}
```

### Error Handling

**Policy Existence Validation:**
```terraform
data "wallix-bastion_local_password_policy" "validated_policy" {
  policy_name = var.policy_name
  
  lifecycle {
    postcondition {
      condition     = self.policy_name != null
      error_message = "Password policy '${var.policy_name}' does not exist."
    }
  }
}
```

## Import

Local password policies are read-only data sources and cannot be imported.

## Read-Only Attributes

All attributes of the password policy are read-only when accessed via this data source:

- **policy_name**: Name of the password policy
- **description**: Description of the policy
- **minimum_length**: Minimum password length
- **maximum_length**: Maximum password length
- **complexity_level**: Overall complexity level
- **require_uppercase**: Whether uppercase letters are required
- **require_lowercase**: Whether lowercase letters are required
- **require_numbers**: Whether numbers are required
- **require_symbols**: Whether symbols are required
- **min_uppercase**: Minimum number of uppercase letters
- **min_lowercase**: Minimum number of lowercase letters
- **min_numbers**: Minimum number of numbers
- **min_symbols**: Minimum number of symbols
- **max_age_days**: Maximum password age in days
- **min_age_days**: Minimum password age in days
- **warning_days**: Warning period before expiration
- **password_history**: Number of previous passwords remembered
- **dictionary_check**: Whether dictionary checking is enabled
- **personal_info_check**: Whether personal info checking is enabled
- **forbidden_chars**: List of forbidden characters
- **force_change_first_login**: Whether password change is forced on first login